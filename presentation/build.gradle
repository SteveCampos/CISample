/*buildscript {
    apply from: 'jacoco.gradle'
}*/
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.stevecampos.cisample"
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
        finalizedBy(jacocoTestReport)
    }
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['connectedAndroidTest',':domain:testDebugUnitTest',  ':infraestructure:testDebugUnitTest',':infraestructure:connectedAndroidTest']) {

    //Define modules from project
    def domain = project(':domain')
    def infraestructure = project(':infraestructure')

    //Enable xml and html reports
    reports {
        xml.enabled true
        html.enabled true
    }

    //Filters
    def fileFilterInfraestructure = ['**/dependencyInjection/','**/movie/httpclient/dto/','**/movie/persistence/entity/','**/movie/anticorruption/']
    def fileFilterApp = ['**/ui/theme/*']
    def fileFilterDomain = ['**/domain/exceptions/*']

    //Source directories and define general source
    def sourceDirectoriesFromApp = fileTree(dir: "${project.projectDir}/src/main/java")
    def sourceDirectoriesFromInfraestructure = fileTree(dir: "${infraestructure.projectDir}/src/main/java")
    def sourceDirectoriesFromDomain = fileTree(dir: "${domain.projectDir}/src/main/java")
    def sourceDirectoriesFromAllModules = layout.files(sourceDirectoriesFromApp,sourceDirectoriesFromDomain,sourceDirectoriesFromInfraestructure)
    sourceDirectories.setFrom(files([sourceDirectoriesFromAllModules]))

    //Class directories and define general directories
    def classDirectoriesFromApp = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug")
    def classDirectoriesFromInfraestructure = fileTree(dir: "${infraestructure.buildDir}/tmp/kotlin-classes/debug")
    def classDirectoriesFromDomain = fileTree(dir: "${domain.buildDir}/tmp/kotlin-classes/debug")
    def classDirectoriesFromAllModules = layout.files(classDirectoriesFromApp,classDirectoriesFromDomain,classDirectoriesFromInfraestructure)
    classDirectories.setFrom(files([classDirectoriesFromAllModules]))

    //Execution files from test task
    def executionFileFromUnitTestInApp = fileTree(dir: "$buildDir", includes: ["outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec"])
    def executionFileFromUnitTestInDomain = fileTree(dir: "$domain.buildDir", includes: ["outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"])
    def executionFileFromUnitTestInInfraestructure = fileTree(dir: "$infraestructure.buildDir", includes: ["outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec"])
    def executionFiles = layout.files(executionFileFromUnitTestInApp,executionFileFromUnitTestInDomain,executionFileFromUnitTestInInfraestructure)
    executionData.setFrom(executionFiles.asFileTree)
}

dependencies {

    implementation project(path: ':domain')
    implementation project(path: ':infraestructure')

    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-compose:$koin_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    def roomVersion = '2.4.2'
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    //kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.3'

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.0'
    implementation 'androidx.activity:activity-compose:1.5.0'
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation("androidx.compose.ui:ui-test-manifest:$compose_version")
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}