plugins {
    id 'jacoco'
}

/*
ext {
    coverageSourceDirs = 'src/test/java'
}
jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("../app/build/reports/rep") // file for reports (xml, html)
}*/

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest',
                    'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled(true)
        html.enabled(true)
    }

    def excludes = ['**/R.class',
                    '**/R$*.class',
                    '**/*$ViewBinder*.*',
                    '**/*$InjectAdapter*.*',
                    '**/*Injector*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
//                    '**/*Activity*.*',
                    '**/CiMattersApplication*.*',
                    'android/**/*.*',
                    '**/di/']

    def debugTree = fileTree(
            dir: "app/build/intermediates/javac/debug/classes/de" +
                    "/logerbyte/jacocotest/javaClasses",
            excludes: excludes)
    def kotlinDebugTree = fileTree(
            dir: "app/build/tmp/kotlin-classes/debug/de/logerbyte/jacocotest",
            excludes: excludes)
    def mainSrc = "domain/src/main/java"
/*
    for other modules
    def debugTreeMyLib = fileTree(
            dir: "../mylibrary/build/intermediates/javac/debug/classes" +
                    "/de/logerbyte/mylibrary/javaClasses",
            excludes: excludes)
    def kotlinDebugTreeMyLib = fileTree(
            dir: "../mylibrary/build/tmp/kotlin-classes/debug/de/logerbyte/mylibrary",
            excludes: excludes)
    def mainSrcMyLib = "../mylibrary/src/main/java"

    */

    classDirectories.setFrom(files(
            [debugTree], [kotlinDebugTree]
            //, [debugTreeMyLib], [kotlinDebugTreeMyLib]
    ))
    sourceDirectories.setFrom(files(
            [mainSrc]
            //, [mainSrcMyLib]
    ))
    executionData.setFrom(files(
            //"../mylibrary/build/jacoco/testDebugUnitTest.exec",
            //"app/build/jacoco/testDebugUnitTest.exec",
            "app/build/jacoco/testDebugUnitTest.exec",
            'app/build/outputs/code_coverage/debugAndroidTest/connected/**coverage.ec'
    ))
    // TODO-SW: for generic devices + emulator doesnt work
//        executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec' , '**/*.ec'])
}