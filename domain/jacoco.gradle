task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest',
                    'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.required = true
        html.required = false
        xml.destination file("build/reports/report-jacoco.xml")
    }

    def excludes = ['**/R.class',
                    '**/R$*.class',
                    '**/*$ViewBinder*.*',
                    '**/*$InjectAdapter*.*',
                    '**/*Injector*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
//                    '**/*Activity*.*',
                    '**/CiMattersApplication*.*',
                    'android/**/*.*',
                    '**/di/']

    def domainDebugTree = fileTree(
            dir: "../domain/build/intermediates/javac/debug/classes/de" +
                    "/logerbyte/jacocotest/javaClasses",
            excludes: excludes)
    def domainKotlinDebugTree = fileTree(
            dir: "../domain/build/tmp/kotlin-classes/debug/de/logerbyte/jacocotest",
            excludes: excludes)
    def domainSrc = "../domain/src/main/java"


    classDirectories.setFrom(files( [domainDebugTree], [domainKotlinDebugTree]))
    sourceDirectories.setFrom(files([domainSrc]))
    executionData.setFrom(
            files(
            //"../domain/build/jacoco/testDebugUnitTest.exec",
            //'../domain/build/outputs/code_coverage/debugAndroidTest/connected/**coverage.ec',
            '../domain/build/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            )
    )
    additionalSourceDirs.setFrom(
            files([domainSrc])
    )
}